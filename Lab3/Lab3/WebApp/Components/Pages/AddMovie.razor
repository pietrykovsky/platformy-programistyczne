@page "/movies/add"
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h3>Add a New Movie</h3>
<EditForm Model="@movie" OnValidSubmit="HandleValidSubmit" FormName="AddMovieForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="movie.Title" />
    </div>
    <div class="form-group">
        <label for="genre">Genre:</label>
        <InputText id="genre" class="form-control" @bind-Value="movie.Genre" />
    </div>
    <div class="form-group">
        <label for="releaseDate">Release Date:</label>
        <InputDate id="releaseDate" class="form-control" @bind-Value="movie.ReleaseDate" />
    </div>
    <div class="form-group">
        <label for="rating">Rating:</label>
        <InputNumber id="rating" class="form-control" @bind-Value="movie.Rating" />
    </div>
    <button type="submit" class="btn btn-primary">Add Movie</button>
</EditForm>

@code {
    private Movie movie = new Movie();

    private async Task HandleValidSubmit()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            movie.UserId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            if (ValidateMovie(movie))
            {
                DbContext.Movies.Add(movie);
                await DbContext.SaveChangesAsync();
                NavigationManager.NavigateTo("/movies");
            }
            else
            {
                // Handle validation failure
                throw new InvalidOperationException("Validation failed.");
            }
        }
        catch (Exception ex)
        {
            // Log the error or display a message
        }
    }

    private bool ValidateMovie(Movie movie)
    {
        // You can add any specific validation logic here
        return !string.IsNullOrEmpty(movie.Title) &&
               !string.IsNullOrEmpty(movie.Genre) &&
               movie.ReleaseDate != default &&
               movie.Rating >= 0 && movie.Rating <= 10;
    }
}

@page "/movies/add"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="@movie" OnValidSubmit="HandleValidSubmit" FormName="AddMovieForm">
                <DataAnnotationsValidator />
                <h3>Add a New Movie</h3>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText id="title" @bind-Value="movie.Title" class="form-control" autocomplete="title" aria-required="true" placeholder="Die Hard" />
                    <label for="title" class="form-label">Title</label>
                    <ValidationMessage For="() => movie.Title" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputSelect id="genre" @bind-Value="movie.Genre" class="form-control" aria-required="true" >
                        <option value="">Select a genre</option>
                        <option value="Action">Action</option>
                        <option value="Comedy">Comedy</option>
                        <option value="Drama">Drama</option>
                        <option value="Fantasy">Fantasy</option>
                        <option value="Horror">Horror</option>
                        <option value="Mystery">Mystery</option>
                        <option value="Romance">Romance</option>
                        <option value="Sci-Fi">Sci-Fi</option>
                        <option value="Thriller">Thriller</option>
                    </InputSelect>
                    <label for="genre" class="form-label">Genre</label>
                    <ValidationMessage For="() => movie.Genre" class="text-danger" />
                </div>
                <div class="form-group">
                    <InputDate id="releaseDate" class="form-control" @bind-Value="movie.ReleaseDate" min="1900-01-01" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <label for="releaseDate" class="form-label">Release Date</label>
                    <ValidationMessage For="() => movie.ReleaseDate" class="text-danger" />
                </div>
                <div class="form-group">
                    <InputNumber id="rating" class="form-control" @bind-Value="movie.Rating" min="1" max="10"/>
                    <label for="rating" class="form-label">Rating</label>
                    <ValidationMessage For="() => movie.Rating" class="text-danger" />
                </div>
                <div>
                    <InputFile id="poster" class="form-control" OnChange="LoadFile" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Add Movie</button>
                    <button class="btn btn-secondary" @onclick="NavigateToMovies">Cancel</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private Movie movie = new Movie();
    private IBrowserFile? uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        movie.ReleaseDate = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc);
        movie.Rating = 5;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            movie.UserId = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            movie.ReleaseDate = DateTime.SpecifyKind(movie.ReleaseDate, DateTimeKind.Utc);

            if (uploadedFile != null)
            {
                var fileName = Guid.NewGuid().ToString() + Path.GetExtension(uploadedFile.Name);
                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", fileName);
                movie.ImagePath = path;
                
                DbContext.Movies.Add(movie);
                await DbContext.SaveChangesAsync();

                await using FileStream fs = new(path, FileMode.Create);
                await uploadedFile.OpenReadStream().CopyToAsync(fs);
                
                NavigationManager.NavigateTo("/movies");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            StateHasChanged();
        }
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private void NavigateToMovies() => NavigationManager.NavigateTo("/movies");
}
